import os
from dotenv import load_dotenv
from together import Together
import json
from devices import Lamp, ACUnit, Television
from functions_definitions import TOOLS
from data_connectors import get_current_weather, get_latest_news, get_current_date_time

load_dotenv()
TOGETHER_API_KEY = os.getenv("TOGETHER_API_KEY")

if not TOGETHER_API_KEY:
    raise ValueError("TOGETHER_API_KEY not found in .env file. Please set it.")

client = Together(api_key=TOGETHER_API_KEY)

home_devices = {
    "lamps": {
        "kitchen": Lamp("Kitchen"),
        "bathroom": Lamp("Bathroom"),
        "room 1": Lamp("Room 1"),
        "room 2": Lamp("Room 2"),
    },
    "ac_units": {
        "room 1": ACUnit("Room 1"),
        "kitchen": ACUnit("Kitchen"),
    },
    "televisions": {
        "living room": Television("Living Room"),
    }
}


def execute_tool_call(tool_call: dict) -> str:
    """
    Executes a specific tool call generated by the LLM.
    This function acts as the bridge between the LLM's suggestion and actual device/data control.
    """
    function_name = tool_call["function"]["name"]
    function_args = json.loads(tool_call["function"]["arguments"])

    # print(f"\n--- Executing Tool Call: {function_name} with arguments: {json.dumps(function_args)} ---")

    device_obj = None
    location = function_args.get("location")  

    # Common arguments for device functions that need to be removed before calling method
    # because the actual Python methods (e.g., Lamp.turn_on()) don't take 'location' as argument.
    # The 'location' is used to select the device object itself.
    filtered_device_args = {k: v for k, v in function_args.items() if k != 'location'}

    if function_name.startswith("turn_on_lamp") or function_name.startswith("turn_off_lamp") or \
            function_name.startswith("get_lamp_status"):
        if location and location in home_devices["lamps"]:
            device_obj = home_devices["lamps"][location]
            method_name = function_name.replace("_lamp", "")  
            method = getattr(device_obj, method_name)
            result = method(**filtered_device_args) 
            print(f"--- Device Execution Result: {result} ---")
            return result
        else:
            return f"Error: Lamp not found at location '{location}'. Please specify a valid location like Kitchen, Bathroom, Room 1, or Room 2."

    elif function_name.startswith("turn_on_ac") or function_name.startswith("turn_off_ac") or \
            function_name.startswith("set_ac_temperature") or function_name.startswith("get_ac_status") or \
            function_name.startswith("get_ac_temperature"):
        if location and location in home_devices["ac_units"]:
            device_obj = home_devices["ac_units"][location]
            method_name = function_name.replace("_ac", "")
            method = getattr(device_obj, method_name)
            result = method(**filtered_device_args)  
            print(f"--- Device Execution Result: {result} ---")
            return result
        else:
            return f"Error: AC unit not found at location '{location}'. Please specify a valid location like Room 1 or Kitchen."
    elif function_name.startswith("turn_on_tv") or function_name.startswith("turn_off_tv") or \
             function_name.startswith("change_tv_channel") or function_name.startswith("mute_tv") or \
             function_name.startswith("unmute_tv") or function_name.startswith("get_tv_status") or \
             function_name.startswith("get_tv_channel"):
        device_obj = home_devices["televisions"]["living room"]
        if location and location != "living room":
            return f"Error: TV is only in the living room, cannot control TV at '{location}'. Please specify 'living room'."

        method_name = function_name.replace("_tv", "")
        method = getattr(device_obj, method_name)
        result = method(**filtered_device_args) 
        print(f"--- Device Execution Result: {result} ---")
        return result

    elif function_name == "get_current_weather":
        result = get_current_weather(location=function_args.get("location"))
        print(f"--- Data Connector Result: {result} ---")
        return result
    elif function_name == "get_latest_news":
        query = function_args.get("query", "general")
        language = function_args.get("language", "en")
        result = get_latest_news(query=query, language=language)
        print(f"--- Data Connector Result: {result} ---")
        return result
    elif function_name == "get_current_date_time":
        result = get_current_date_time()
        print(f"--- Data Connector Result: {result} ---")
        return result

    return f"Error: Unknown function or unsupported command: {function_name}"

def chat_with_assistant(user_message: str):
        messages = [
            {"role": "system", "content": """You are a helpful and precise smart home assistant.
        Your main task is to control smart home devices (lamps, AC units, TV) and answer questions about them.
        You can also provide real-time weather information, the latest news, and the current date and time.
        Controllable devices list:
        - Lamps: Kitchen, Bathroom, Room 1, Room 2
        - AC Units: Room 1, Kitchen
        - Television: Living Room

        You are multilingual and can understand and respond in English and Persian (Farsi). Always use the language the user is speaking in your response.
        Never attempt to control or simulate devices or functions that are not explicitly defined in your provided tools.
        If a device or function outside your capabilities is requested, explicitly inform the user that you do not have that capability or the device does not exist.
        If you need more information (such as location or other parameters) to perform an action, always ask the user clear and specific questions.
        Use the provided tools when necessary, and always provide a natural language response."""},
            {"role": "user", "content": user_message}
        ]

        try:
            response = client.chat.completions.create(
                model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free", 
                messages=messages,
                tools=TOOLS,  
                tool_choice="auto"  
            )

            if response.choices[0].message.tool_calls:
                tool_calls = response.choices[0].message.tool_calls

                messages.append(response.choices[0].message)
              
                tool_outputs = []
                for tool_call in tool_calls:
                    tool_output = execute_tool_call(tool_call.model_dump())
                    tool_outputs.append({
                        "role": "tool",
                        "content": tool_output,
                        "tool_call_id": tool_call.id
                    })

                messages.extend(tool_outputs)

                final_response = client.chat.completions.create(
                    model="meta-llama/Llama-3.3-70B-Instruct-Turbo-Free",  
                    messages=messages
                )
                return final_response.choices[0].message.content
            else:
                return response.choices[0].message.content

        except Exception as e:
            print(f"An error occurred in chat_with_assistant: {e}")
            return f"An error occurred while processing your request: {e}. Please try again."
